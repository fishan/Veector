import os
import numpy as np
import psutil
import onnxruntime as ort
from transformers import AutoTokenizer

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
def log_memory():
    memory = psutil.virtual_memory()
    return f"–ü–∞–º—è—Ç—å: {memory.used / (1024 * 1024):.2f} MB / {memory.total / (1024 * 1024):.2f} MB"

print(f"üü¢ [LOG] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è... {log_memory()}")

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
model_dir = "../data/models/DeepSeek-R1-Distill-Qwen-1.5B-ONNX"
split_model_path = os.path.join(model_dir, "model_split.onnx")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
files = os.listdir(model_dir)
print(f"üü¢ [LOG] üìÇ –§–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –≤ {model_dir}:")
total_size = 0
for f in files:
    size_mb = os.path.getsize(os.path.join(model_dir, f)) / (1024 * 1024)
    total_size += size_mb
    print(f"üü¢ [LOG] üìÑ {f}: {size_mb:.2f} MB")
print(f"üü¢ [LOG] –§–∞–π–ª—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.2f} MB {log_memory()}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
session_options = ort.SessionOptions()
session_options.graph_optimization_level = ort.GraphOptimizationLevel.ORT_DISABLE_ALL
print(f"üü¢ [LOG] –ü–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–µ—Å—Å–∏–∏ {log_memory()}")
session = ort.InferenceSession(split_model_path, sess_options=session_options)
print(f"üü¢ [LOG] ‚úÖ ONNX Runtime –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Ö–æ–¥—ã: {[inp.name for inp in session.get_inputs()]} {log_memory()}")

# –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
tokenizer = AutoTokenizer.from_pretrained(model_dir)
print(f"üü¢ [LOG] –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω {log_memory()}")

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
input_ids = tokenizer("Hello", return_tensors="np")["input_ids"].astype(np.int64)
attention_mask = np.ones_like(input_ids, dtype=np.int64)
position_ids = np.arange(input_ids.shape[1], dtype=np.int64)[None, :]
input_feed = {
    "input_ids": input_ids,
    "attention_mask": attention_mask,
    "position_ids": position_ids,
}
for i in range(28):
    input_feed[f"past_key_values.{i}.key"] = np.zeros((1, 2, 0, 128), dtype=np.float16)
    input_feed[f"past_key_values.{i}.value"] = np.zeros((1, 2, 0, 128), dtype=np.float16)

print(f"üü¢ [LOG] –í—Ö–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω {log_memory()}")
outputs = session.run(None, input_feed)
print(f"üü¢ [LOG] –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –≤—ã–ø–æ–ª–Ω–µ–Ω {log_memory()}")
print(f"üü¢ [LOG] –í—ã—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤: {outputs[0].shape}")